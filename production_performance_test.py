#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è production —Å–µ—Ä–≤–µ—Ä–∞ 0123.ru
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞ VPS –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import requests
import time
import statistics
import json
from datetime import datetime
import os

class ProductionPerformanceTest:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.results = []
        self.session = requests.Session()
        
    def test_homepage(self, iterations: int = 10):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        print(f"üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        times = []
        for i in range(iterations):
            start_time = time.time()
            try:
                response = self.session.get(f"{self.base_url}/", timeout=10)
                response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                times.append(response_time)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: {response_time:.1f}ms")
                else:
                    print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ - {e}")
                
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å—Ä–µ–¥–Ω–µ–µ={avg_time:.1f}ms, –º–∏–Ω={min_time:.1f}ms, –º–∞–∫—Å={max_time:.1f}ms")
            
        return times
    
    def test_file_upload(self, file_size_kb: int = 100, iterations: int = 5):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"""
        print(f"üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ {file_size_kb}KB ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file_content = b'0' * (file_size_kb * 1024)
        
        times = []
        for i in range(iterations):
            start_time = time.time()
            try:
                files = {'file': (f'test_{i}.txt', test_file_content, 'text/plain')}
                data = {'custom_code': f'TEST{i:03d}'}
                
                response = self.session.post(f"{self.base_url}/", files=files, data=data, timeout=30)
                response_time = (time.time() - start_time) * 1000
                times.append(response_time)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ {i+1}: {response_time:.1f}ms")
                else:
                    print(f"  ‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ {i+1}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ {i+1}: –û—à–∏–±–∫–∞ - {e}")
                
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å—Ä–µ–¥–Ω–µ–µ={avg_time:.1f}ms, –º–∏–Ω={min_time:.1f}ms, –º–∞–∫—Å={max_time:.1f}ms")
            
        return times
    
    def test_file_download(self, file_url: str, iterations: int = 5):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        print(f"üì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        times = []
        for i in range(iterations):
            start_time = time.time()
            try:
                response = self.session.get(file_url, timeout=30)
                response_time = (time.time() - start_time) * 1000
                times.append(response_time)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i+1}: {response_time:.1f}ms")
                else:
                    print(f"  ‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i+1}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i+1}: –û—à–∏–±–∫–∞ - {e}")
                
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å—Ä–µ–¥–Ω–µ–µ={avg_time:.1f}ms, –º–∏–Ω={min_time:.1f}ms, –º–∞–∫—Å={max_time:.1f}ms")
            
        return times
    
    def test_concurrent_requests(self, concurrent: int = 10, iterations: int = 5):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ({concurrent} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö, {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        
        import threading
        
        def make_request():
            start_time = time.time()
            try:
                response = self.session.get(f"{self.base_url}/", timeout=10)
                response_time = (time.time() - start_time) * 1000
                return response_time, response.status_code
            except Exception as e:
                return None, str(e)
        
        all_times = []
        for i in range(iterations):
            print(f"  üöÄ –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}...")
            
            threads = []
            results = []
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
            for j in range(concurrent):
                thread = threading.Thread(target=lambda: results.append(make_request()))
                threads.append(thread)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            start_time = time.time()
            for thread in threads:
                thread.start()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for thread in threads:
                thread.join()
            
            total_time = (time.time() - start_time) * 1000
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_times = [r[0] for r in results if r[0] is not None]
            if successful_times:
                avg_time = statistics.mean(successful_times)
                all_times.append(avg_time)
                print(f"    üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}ms, –æ–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}ms")
            else:
                print(f"    ‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
        
        if all_times:
            overall_avg = statistics.mean(all_times)
            print(f"  üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {overall_avg:.1f}ms")
            
        return all_times
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 0123.ru")
        print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä: {self.base_url}")
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        homepage_times = self.test_homepage(20)
        print()
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        upload_times = self.test_file_upload(100, 10)
        print()
        
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        concurrent_times = self.test_concurrent_requests(20, 3)
        print()
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("=" * 60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("=" * 60)
        
        if homepage_times:
            avg_homepage = statistics.mean(homepage_times)
            print(f"üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {avg_homepage:.1f}ms (—Å—Ä–µ–¥–Ω–µ–µ)")
            
        if upload_times:
            avg_upload = statistics.mean(upload_times)
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: {avg_upload:.1f}ms (—Å—Ä–µ–¥–Ω–µ–µ)")
            
        if concurrent_times:
            avg_concurrent = statistics.mean(concurrent_times)
            print(f"üîÑ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {avg_concurrent:.1f}ms (—Å—Ä–µ–¥–Ω–µ–µ)")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\nüéØ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        if homepage_times and upload_times:
            avg_response = (statistics.mean(homepage_times) + statistics.mean(upload_times)) / 2
            
            if avg_response < 200:
                print("  üü¢ –û–¢–õ–ò–ß–ù–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ")
            elif avg_response < 500:
                print("  üü° –•–û–†–û–®–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∏–µ–º–ª–µ–º–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é")
            elif avg_response < 1000:
                print("  üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ")
            else:
                print("  üî¥ –ü–õ–û–•–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ")
        
        print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python production_performance_test.py <URL_–°–ï–†–í–ï–†–ê>")
        print("–ü—Ä–∏–º–µ—Ä: python production_performance_test.py http://YOUR_SERVER_IP")
        sys.exit(1)
    
    base_url = sys.argv[1].rstrip('/')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{base_url}/", timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä {base_url} –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {base_url} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {base_url}: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    tester = ProductionPerformanceTest(base_url)
    tester.run_full_test()

if __name__ == "__main__":
    main()
