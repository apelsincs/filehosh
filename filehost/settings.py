"""
Django settings for filehost project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Загружаем переменные окружения из .env файла
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-your-secret-key-here-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,0123.ru').split(',')

# Base site URL for building absolute links in places without request context
# In production, set SITE_BASE_URL env var to your public origin (e.g., https://0123.ru)
SITE_BASE_URL = os.getenv('SITE_BASE_URL', 'http://localhost:8000' if DEBUG else 'http://0123.ru')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Для sitemap
    'files',  # Наше приложение для файлов
    'crispy_forms',
    'crispy_bootstrap5',
    'django_crontab',  # Для автоматического выполнения задач
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Наши middleware для безопасности
    'files.middleware.AnonymousSessionMiddleware',  # Должен быть первым из наших
    'files.middleware.SecurityMonitoringMiddleware',
    'files.middleware.RateLimitMiddleware',
    'files.middleware.SecurityHeadersMiddleware',
]

ROOT_URLCONF = 'filehost.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'filehost.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# База данных
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL and DATABASE_URL.startswith('postgresql://'):
    # PostgreSQL для продакшена
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # SQLite для разработки
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# Отключаем все ограничения на пароли для файлов
AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ('ru', 'Русский'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.getenv('STATIC_ROOT', BASE_DIR / 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files (загруженные файлы)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.getenv('MEDIA_ROOT', BASE_DIR / 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Настройки для файлового хостинга
MAX_FILE_SIZE = int(os.getenv('MAX_FILE_SIZE', 25 * 1024 * 1024))  # 25 МБ в байтах
FILE_EXPIRY_HOURS = int(os.getenv('FILE_EXPIRY_HOURS', 24))  # Время жизни файлов в часах

# Настройки для QR кодов
QR_CODE_SIZE = int(os.getenv('QR_CODE_SIZE', 10))

# Настройки безопасности и rate limiting
RATE_LIMIT_UPLOAD = int(os.getenv('RATE_LIMIT_UPLOAD', 5))  # Максимум 5 загрузок в минуту
RATE_LIMIT_API = int(os.getenv('RATE_LIMIT_API', 10))    # Максимум 10 API запросов в минуту
RATE_LIMIT_WINDOW = int(os.getenv('RATE_LIMIT_WINDOW', 60)) # Окно времени в секундах

# Настройки логирования безопасности
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'security': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'security',
        },
        'security_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'security',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file', 'security_console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# Настройки для автоматического выполнения задач (cron)
CRONJOBS = [
    # Запускать очистку истекших файлов каждый час
    ('0 * * * *', 'files.cron.cleanup_expired_files'),
    
    # Генерировать sitemap каждый день в 2:00 утра
    ('0 2 * * *', 'django.core.management.call_command', ['generate_sitemap']),
    
    # Альтернативно, можно запускать каждые 6 часов
    # ('0 */6 * * *', 'files.cron.cleanup_expired_files'),
    
    # Или каждый день в 3:00 утра
    # ('0 3 * * *', 'files.cron.cleanup_expired_files'),
]

# Настройки для django-crontab
CRONTAB_LOCK_JOBS = True  # Блокировать выполнение задач
CRONTAB_COMMAND_PREFIX = 'DJANGO_SETTINGS_MODULE=filehost.settings'  # Установить переменную окружения

# Настройки для Sites framework (для sitemap)
SITE_ID = 1

# Настройки безопасности для продакшена
if not DEBUG:
    # HTTPS настройки
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', 31536000))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'True').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = os.getenv('SECURE_BROWSER_XSS_FILTER', 'True').lower() == 'true'
    SECURE_CONTENT_TYPE_NOSNIFF = os.getenv('SECURE_CONTENT_TYPE_NOSNIFF', 'True').lower() == 'true'
    X_FRAME_OPTIONS = os.getenv('X_FRAME_OPTIONS', 'DENY')
    
    # Настройки сессий
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Настройки логирования для продакшена
    LOG_FILE = os.getenv('LOG_FILE', os.path.join(BASE_DIR, 'logs', 'django.log'))
    if LOG_FILE:
        # Убеждаемся, что директория logs существует
        os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
        
        LOGGING['handlers']['file'] = {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'security',
        }
        LOGGING['loggers']['django'] = {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        }
